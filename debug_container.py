#!/usr/bin/env python3
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
"""
import subprocess
import sys
import os
import time

def check_container():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        result = subprocess.run(
            ["docker", "ps", "--filter", "name=rag_service_dev", "--format", "{{.Names}}"],
            capture_output=True,
            text=True,
            check=True
        )
        return "rag_service_dev" in result.stdout
    except subprocess.CalledProcessError:
        return False

def start_container():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...")
    try:
        subprocess.run(
            ["docker-compose", "-f", "docker-compose.dev.yml", "up", "-d"],
            check=True,
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
        return False

def wait_for_debugger():
    """–ñ–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ª–∞–¥—á–∏–∫–∞"""
    print("‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ª–∞–¥—á–∏–∫–∞...")
    import socket
    for _ in range(30):  # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('localhost', 5678))
            sock.close()
            if result == 0:
                print("üéØ –û—Ç–ª–∞–¥—á–∏–∫ –≥–æ—Ç–æ–≤!")
                return True
        except:
            pass
        time.sleep(1)
    print("‚ö†Ô∏è –û—Ç–ª–∞–¥—á–∏–∫ –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    return False

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ RAG Service –≤ Docker")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if not check_container():
        if not start_container():
            sys.exit(1)
    else:
        print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ª–∞–¥—á–∏–∫–∞
    wait_for_debugger()
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("1. –í VS Code –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Debug Panel (Cmd+Shift+D)")
    print("2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é 'Python: Attach to Container'")
    print("3. –ù–∞–∂–º–∏—Ç–µ F5 –∏–ª–∏ –∫–Ω–æ–ø–∫—É ‚ñ∂Ô∏è")
    print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ breakpoints –≤ –∫–æ–¥–µ")
    print("5. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ API: http://localhost:8001")
    print("\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("   API: http://localhost:8001")
    print("   Health: http://localhost:8001/health")
    print("   Debug port: localhost:5678")
    
if __name__ == "__main__":
    main()
